name: CI/CD Pipeline

on:
  push:
    branches: [ main, cicd-docker-deploy ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
    - name: 检出代码
      uses: actions/checkout@v4
      
    - name: 设置 Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: 安装依赖
      run: npm ci
      
    - name: 运行测试
      run: npm test
      
    - name: 代码质量检查
      run: |
        echo "检查代码格式..."
        # 基础检查已在 npm test 中完成
        
  build-and-push:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/cicd-docker-deploy'
    
    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}
      image-digest: ${{ steps.build.outputs.digest }}
    
    steps:
    - name: 检出代码
      uses: actions/checkout@v4
      
    - name: 设置 Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: 登录到 Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
        
    - name: 提取元数据
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
          
    - name: 构建并推送 Docker 镜像
      id: build
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        
  deploy:
    needs: [test, build-and-push]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: 连接到 Tailscale 网络
      uses: tailscale/github-action@v2
      with:
        oauth-client-id: ${{ secrets.TAILSCALE_OAUTH_CLIENT_ID }}
        oauth-secret: ${{ secrets.TAILSCALE_OAUTH_SECRET }}
        tags: tag:ci
        
    - name: 等待 Tailscale 连接建立
      run: |
        echo "等待 Tailscale 连接建立..."
        sleep 5
        tailscale status
        
    - name: 验证目标服务器连通性
      run: |
        echo "验证到目标服务器的连接..."
        ping -c 3 ${{ secrets.SERVER_HOST }} || {
          echo "❌ 无法连接到服务器 ${{ secrets.SERVER_HOST }}"
          echo "检查 Tailscale 网络配置和服务器状态"
          tailscale status
          exit 1
        }
        echo "✅ 服务器连接正常"
        
    - name: 部署到服务器
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.SERVER_HOST }}
        username: ${{ secrets.SERVER_USER }}
        key: ${{ secrets.SERVER_SSH_KEY }}
        port: ${{ secrets.SERVER_PORT || 22 }}
        script: |
          # 停止现有容器
          docker stop dom-catcher-server || true
          docker rm dom-catcher-server || true
          
          # 清理旧镜像
          docker image prune -f
          
          # 登录到 GitHub Container Registry
          echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin
          
          # 拉取最新镜像
          docker pull ${{ needs.build-and-push.outputs.image-tag }}
          
          # 运行新容器
          docker run -d \
            --name dom-catcher-server \
            --restart unless-stopped \
            -p 3000:3000 \
            -v /opt/dom-catcher/captured:/app/captured \
            ${{ needs.build-and-push.outputs.image-tag }}
            
          # 等待服务启动
          sleep 10
          
          # 检查服务状态
          if curl -f http://localhost:3000/status; then
            echo "✅ 部署成功！服务正常运行"
          else
            echo "❌ 部署失败！服务无法访问"
            exit 1
          fi
